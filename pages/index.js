import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Navbar from '../pagecomponents/Navbar'
import BookingNavbar from '../pagecomponents/BookingNavbar'
import { Component } from "react";
import DatePicker from "react-datepicker";
import setHours from "date-fns/setHours";
import setMinutes from "date-fns/setMinutes";

let handleColor = (time) => {
  return time.getHours() > 12 ? "text-success" : "text-error";
};
var isWeekend=(date) =>{
  const weekday = date.getDay();

  return weekday === 0 || weekday === 6;
};
export default class Home extends Component {
  constructor(props) {
    super(props)
    this.state = {
      startDate: '',
    }
  }
  async filterFunction(e){
    
    var input, filter, ul, li, a, i ;
    input = document.getElementById('officeInput');
    filter = input.value.toUpperCase();
    ul = document.getElementById('office-list');
    a = ul.getElementsByTagName('a');
    for(i =0; i < a.length; i++){
      var txtValue = a[i].textContent || a[i].innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        a[i].style.display = "";
      } else {
        a[i].style.display = "none";
      }
    }
  }

  async onChangeDate(e){
    const start = await e
    await console.log(e);
    // const [start, end] = await e
    await console.log(start, /*end*/);
    await this.setState({startDate: start, /*endDate: end*/});
  }

  async getinformation(date){
    const weekday = date.getDay();
    console.log(isWeekend(date))
  };
  
  render(
    
  ){
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar/>
      <BookingNavbar/>
      <main className={styles.main}>
        <section id='home'>
          <h1 className={styles.title}>
            Welcome to <a href="https://nextjs.org">Next.js!</a>
          </h1>

          <p className={styles.description}>
            Get started by editing{' '}
            <code className={styles.code}>pages/index.js</code>
          </p>
        </section>
        

        {/* <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div> */}

        <section className='' id='office'>
          <h1>Choose Office</h1>
          <div className='search-box'>
            <input className='search-field' type="search" placeholder="search..." id="officeInput" onKeyUp={(e) => {this.filterFunction()}} ></input>
            <button type='submit'>search</button>
          </div>
          <ul className='menu-list' id="office-list">
            <li><a onClick={ async(e) => {await this.setState({office: "Office_0"}); document.getElementById('officeInput').value=await this.state.office;}}>Office_0</a></li>
            <li><a>Office_1</a></li>
            <li><a>Office_2</a></li>
            <li><a>Office_3</a></li>
            <li><a>Office_4</a></li>
            <li><a>Office_5</a></li>
            <li><a>Office_6</a></li>
          </ul>
        </section>
        <section className="" id='job'>
          <h1>Choose Job</h1>
          <div className='search-box'>
            <input className='search-field' type="search" placeholder="search..." id="officeInput" onKeyUp={(e) => {this.filterFunction();}} ></input>
            <button type='submit'>search</button>
          </div>
          <ul className='menu-list' id="office-list">
            <li><a onClick={(e) => {this.setState({office: "Office_0"});}}>Office_0</a></li>
            <li><a>Office_1</a></li>
            <li><a>Office_2</a></li>
            <li><a>Office_3</a></li>
            <li><a>Office_4</a></li>
            <li><a>Office_5</a></li>
            <li><a>Office_6</a></li>
          </ul>
        </section>
        <section className="" id='time'>
          <h1>Select Date And Time</h1>
          <div className='row'>
            <div className='col'>
              <DatePicker
                selected={this.state.startDate}
                onChange={(date)=>this.onChangeDate(date)}
                startDate={this.state.startDate}
                // endDate={this.state.endDate}
                // selectsRange
                
                // peekNextMonth
                showMonthDropdown
                showYearDropdown
                dropdownMode="select"
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={60}
                timeCaption="time"
                dateFormat="d, MMM, yyyy h:mm:ss a"
                minDate={new Date()}
                excludeTimes={[
                  setHours(setMinutes(new Date(), 0), 17),
                  setHours(setMinutes(new Date(), 0), 18),
                  setHours(setMinutes(new Date(), 0), 19),
                  setHours(setMinutes(new Date(), 0), 17),
                ]}
                //mm/dd/yyyy
                dayClassName={(date) => ((date.getTime() === new Date('07/23/2022').getTime(''))|| isWeekend(date)) ? 'disabled-date' : 'enabled-date'}

                // timeClassName={(time) =>  ((time.getDay() === new Date('07/07/2022').getDay(''))&&(time.getHours() ==9|| time.getHours() ==10|| time.getHours() ==11|| time.getHours() ==13 )) ? "text-success" : "text-error"}
              />
            </div>
            <div className='col'>
              <form>
                <input type='text' value={this.state.office}/>
              </form>
            </div>            
          </div>
        </section>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
  }
}
